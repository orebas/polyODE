#ifndef PHC_SOLVER_HPP
#define PHC_SOLVER_HPP

#include "polynomial_solver.hpp"
#include <complex>
#include <map>
#include <string>
#include <vector>

namespace poly_ode {

/**
 * @brief A polynomial solver implementation using the PHCpack executable.
 *
 * Solves a system of polynomial equations by:
 * 1. Writing the system to a file in PHC format.
 * 2. Calling the 'phc -b' command to solve the system.
 * 3. Calling 'phc -x' to convert the output to a Python dictionary string.
 * 4. Piping the dictionary string through 'scripts/phc_dict_to_json.py' to get JSON.
 * 5. Parsing the JSON output to extract complex solutions.
 */
class PHCSolver : public PolynomialSolver {
  public:
    /**
     * @brief Constructor.
     *
     * @param phc_executable_path Path to the 'phc' executable. Defaults to "phc",
     *                            assuming it's in the system PATH.
     * @param python_script_path Path to the 'phc_dict_to_json.py' script.
     *                           Defaults to "scripts/phc_dict_to_json.py".
     */
    explicit PHCSolver(std::string phc_executable_path = "phc",
                       std::string python_script_path = "scripts/phc_dict_to_json.py");

    /**
     * @brief Solves the system using PHCpack.
     *
     * @param system The AlgebraicSystem to solve.
     * @return PolynomialSolutionSet The set of complex solutions found by PHC.
     */
    PolynomialSolutionSet solve(const AlgebraicSystem &system) override;

    /**
     * @brief Returns the solver name.
     *
     * @return std::string "PHCSolver".
     */
    std::string name() const override;

  private:
    std::string phc_executable_path_;
    std::string python_script_path_;

    /**
     * @brief Converts the algebraic system into the PHC input file format.
     *
     * @param system The algebraic system.
     * @param variable_map A map to store the mapping from poly_ode::Variable to PHC index (x0, x1, ...).
     * @return std::string The content for the PHC input file.
     */
    std::string convert_to_phc_format(const AlgebraicSystem &system, std::map<Variable, size_t> &variable_map) const;

    /**
     * @brief Parses the JSON output file generated by PHC and the Python script.
     *
     * @param json_file_path Path to the JSON output file.
     * @param original_unknowns The original ordered list of unknown Variables.
     * @return PolynomialSolutionSet The parsed solutions.
     */
    PolynomialSolutionSet parse_phc_json_output(const std::string &json_file_path,
                                                const std::vector<Variable> &original_unknowns) const;

    /**
     * @brief Runs an external command and captures its standard output and error.
     *
     * @param command The command string to execute.
     * @param[out] std_output String to capture standard output (and potentially stderr).
     * @param[out] std_error String to capture standard error (mainly for popen/pclose errors).
     * @return int The exit code of the command.
     */
    int run_command(const std::string &command, std::string &std_output, std::string &std_error) const;

    /**
     * @brief Creates temporary files for input and output with unique names.
     *
     * @return std::pair<std::string, std::string> Input file path, Output file path (base name).
     */
    std::pair<std::string, std::string> create_temp_files() const;
};

} // namespace poly_ode

#endif // PHC_SOLVER_HPP